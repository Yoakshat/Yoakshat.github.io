<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://yoakshat.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://yoakshat.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-04-18T04:00:37+00:00</updated><id>https://yoakshat.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">AI APIs in Healthcare</title><link href="https://yoakshat.github.io/blog/2023/AI-APIs-in-Healthcare/" rel="alternate" type="text/html" title="AI APIs in Healthcare" /><published>2023-04-14T00:00:00+00:00</published><updated>2023-04-14T00:00:00+00:00</updated><id>https://yoakshat.github.io/blog/2023/AI-APIs-in-Healthcare</id><content type="html" xml:base="https://yoakshat.github.io/blog/2023/AI-APIs-in-Healthcare/"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>People are thinking that the new best people in any field will be the people 
who know how to use AI the ‘best way.’ They know how AI can best combine with their creative
mind and efforts. They may be right or absolutely wrong.</p>

<p>AI developers are working to democratize AI, to bring a no-code workspace but still modify the 
AI to more of their liking. To take their expert knowledge and augment the AI with it. Then maybe 
when we get this, physicians and doctors won’t be frustrated that neural networks are ‘black boxes.’ 
Instead they can be like a puppet steering the AI in the right direction and checking if the math 
behind the scenes is leading to the right results.</p>

<p>So as of today, what are the AI APIs in healthcare that do this sort of thing?</p>

<h2 id="technology-apis">Technology APIs</h2>
<p>In the healthcare world, technology API companies are growing and becoming unicorn companies. Optum,
under the same creators of UnitedHealth, is one of the biggest data analytics arms for healthcare 
companies to directly plug in. Healthcare is very complicated, so if a tool doesn’t provide any 
overhead stress but makes life easier, it’s a good pitch.</p>

<p>There are also APIs like Particle Health. As an introduction, healthcare requires great security, 
anonymization, so if we wanted to have an API where hospitals could access patient records just from
their name we wouldn’t be able to. It’d be extremely helpful to hospitals, but also lead to needing
cybersecurity teams constantly battling the hacking going on (while billions of records are at risk). 
What Particle Health does is instead use patient demographics to find a patient and all of their 
records; it’s a great and simple idea!</p>

<p>Brendan Keeler in his new quirky post on April 10 called “Super Integration Fighter III” splits software into the “atomic units,” databases, user interfaces, and system interfaces.</p>

<p>Healthcare tends to outsource a lot of things to APIs (especially now with physician burnout on a high where it’s better for tech to do some of the jobs). Keeler talks about how when we get to the optimal stage, of any hospital or clinic being able to access a patient’s data or use an API that connects all patients, we’ll have to throw away the idea of tech siloes. It’ll be hard but either there’ll need to be a common data format (like FHIR which makes it easy) or even what would be interesting, a way hospitals could easily change the API for their use case with low-code.</p>

<p>I really want to talk about this part, about getting the power of APIs in the hospital’s hands and obviously with AI, because that’s been my craze for a long time and now on everybody else’s trending page.</p>

<h2 id="ai-no-code-software">AI No-Code Software</h2>
<p>After searching around, there is not much research on AI low-code or no-code software IN HEALTHCARE. We’ve heard 
of AI being used for finding similar gene expressions, for making DNA/RNA sequencing cheap, but what about deployment? 
AI will accelerate, but now hasn’t really, but let’s look at how AI low-code software will work practically?</p>

<p>Brainstorming a few applications off my mind</p>
<ul>
  <li>If a doctor doesn’t agree with the AI model say taking an image and predicting cancer, the doctor can type into the AI their
reasons and the AI might augment its prediction (we’re not there yet).</li>
  <li>More API-style, you tell your AI your use case and they look through the EHR to find what information you need (this could be really cool)</li>
  <li>AI APIs don’t just need to be doctor facing but can also be patient-facing helping them distill hard-to-understand medical information</li>
</ul>

<p>With all the processing tasks, my imagination of low-code is there are differences across each clinic? Can you find some way to embed information in the AI that tells them because of this difference, do this task this way. Because there are common use cases, but a billion different data formats, a billion different little things to do. If we get every sort of data to be machine-readable, throw away the idea of a common data format (like FHIR), we’ll let the AI do its work!</p>

<h2 id="conclusion">Conclusion</h2>
<p>I think what this is getting at is what we call multi-task learning in AI. An AI tried out a bunch of different data problems. Now the AI knows I can use how I solved all these other problems, to solve this new problem, even though it looks 
different! And this is how academics learn, how people learn. Researches have tried different neural networks, RNN, ANNs, Transformers, hundreds of times, and they have some intuition on what model they should use for a new problem.</p>

<p>Instead of the billions of different AI applications we’re seeing (like AI art-generation, AI text-generation, AI Q&amp;A) I think we achieve real human-computer interaction when you can talk to it in some sort of semi machine-human language (not code) and it can do whatever you want.</p>

<p>Then again, I wouldn’t think it would be frustrating if it was like a vending machine or a drink machine, where you click what application you want (text generation, art generation, Q&amp;A). That’ll only be $1.50 (vending machine joke). Then the machine figures how to do the task for your set of data. It’s all interesting, futuristic, and awesome!</p>

<p><i>Goodnight even though it’s not night,
yall!</i></p>]]></content><author><name>Akshat Mundra</name></author><summary type="html"><![CDATA[how AI is being brought to medical experts with no AI expertise]]></summary></entry><entry><title type="html">Unsupervised learning is weird!</title><link href="https://yoakshat.github.io/blog/2023/unsupervised-learning-is-weird/" rel="alternate" type="text/html" title="Unsupervised learning is weird!" /><published>2023-04-12T00:00:00+00:00</published><updated>2023-04-12T00:00:00+00:00</updated><id>https://yoakshat.github.io/blog/2023/unsupervised-learning-is-weird</id><content type="html" xml:base="https://yoakshat.github.io/blog/2023/unsupervised-learning-is-weird/"><![CDATA[<p>Unsupervised learning is a very weird world. Imagine you are walking
down a park, sit on a bench, and then get some wise words from an older person.
The words don’t make any sense, but somehow they give structure to your life. I am
not sure many of you have had that experience, but unsupervised learning uses nothing
(except some scientist’s statistical techniques) to find structure in the data.</p>

<p>Monty Python (oops I mean Monty Hall) is also a weird problem but statistics tell us the answer.
In this post, I’m going to pull infamous examples of unsupervised learning that have blown scientists
away!</p>

<div class="row mt-3">
   <div class="col-sm mt-3 mt-md-0">
       <figure>

  <picture>
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/montyhall.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

   </div>
</div>

<h1>tSNE embeddings with Brawl Stars</h1>

<p>One interesting unsupervised technique is <a href="https://www.jmlr.org/papers/volume9/vandermaaten08a/vandermaaten08a.pdf">tSNE embeddings</a>. The S stands for stochastic, which means an ‘estimation.’ The classic example is a ball rolling down a hill, but you have no idea where the ball is going to end up. Now comes an example related to what we love, playing Brawl Stars! As a brawler, you’re noticing hmmm let’s draw a boundary here. After all, we can’t have Crow
and Leon attacking each other right in the start! Now let’s continue drawing boundaries, until we have a pretty fair map!</p>

<p>For the non Brawl-Star readers, first of all, I’m sorry. Hopefully you’ve heard of the game Catan. Everyone knows
the process of changing the hexagons so no stones are nearby, no 3 adjacent hexagons are too powerful. That is a
‘stochastic’ description of how tSNE works, but instead of setting the Catan board up or creating a Brawl Stars map,
it’s taking high-dimensional data and transforming it into low-dimensional data. The idea is that data points nearby
in high dimensions should also be nearby in the transformed dimensions (e.g. Leon and Leon should be close together,
but not Leon and Crow).</p>

<p>A really nice explanation with visualizations is <a href="https://www.enjoyalgorithms.com/blog/tsne-algorithm-in-ml">here</a>.</p>

<div class="row mt-3">
   <div class="col-sm mt-3 mt-md-0">
       <figure>

  <picture>
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/brawl.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

   </div>
</div>

<h5>What has tSNE been used for?</h5>
<p>Imagine <a href="https://www.nature.com/articles/s41467-019-13056-x">RNA expression levels for thousands of genes from up to millions of cells”</a>. How do you compare single cells with millions of information? Think about why tSNE is there, because ‘life’ is very complicated (get it haha). And maybe if you find a single cell that on a 2D graph
is near another one that scientists know, you can tell that cell’s purpose. Maybe inside the cell, a gene is being
regulated that is causing a disease.</p>

<p>Or maybe <a href="https://www.kaggle.com/code/vatsalmavani/music-recommendation-system-using-spotify-dataset">Spotify</a> wants to take the audio features of the song, and based on the songs you like, tell you what other songs you’ll like (e.g. sound similar). Or even maybe Spotify wants to give you vastly different song recs so you can explore your music
taste!</p>

<h2>Zero shot learning</h2>
<p>I don’t know if zero shot learning is an example of unsupervised learning, but the idea is that it
can learn new concepts without have any data. So for example when you were a baby, you saw penguins, koalas,
snakes, pandas, but you never saw a Giraffe. You didn’t even know it was called a Giraffe! So you decided to
call it tall white animal with golden spots.</p>

<p>You don’t need any labels (kind of the idea of unsupervised learning). This paper in 2015 that I have absolutely
not read, but <a href="https://proceedings.mlr.press/v37/romera-paredes15.html">caught my attention</a> because it
discusses how a one-line solution beat SOTA in zero-shot learning. It’s definitely interesting, but that’s all I want
to talk about it for now!</p>

<div class="row mt-3">
   <div class="col-sm mt-3 mt-md-0">
       <figure>

  <picture>
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/v7labs.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

   </div>
</div>

<h2>Let's talk about Autoencoders!</h2>
<p>Have I ever heard anyone that excited about autoencoders?! Actually, yes. <a href="http://ufldl.stanford.edu/tutorial/unsupervised/Autoencoders/">A nice read on autoencoders</a>.</p>

<p>Even autoencoders would probably be excited about themselves because they love to learn! Let me explain. The sort of
motivation goes like we love discovering things ourselves without anyone’s help. Let’s give you a neural network and
all you have to do is take your image and output that same image.</p>

<p>But we’re going make life very hard for you! We’re going to add an activation (so you can’t just have weights with 1,
1, 1, 1), we’re going to turn off some of your neurons. It’s hell, but by trying to get out of that hell, the autoencoder learns hey, maybe, if I figure this is grass most of the pixels around are grass. And so on.</p>

<div class="row mt-3">
   <div class="col-sm mt-3 mt-md-0">
       <figure>

  <picture>
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/hell.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

   </div>
</div>

<p>Unsupervised learning is a very weird statistical world! Put in an input of the Multiverse, you might get an output
of the Rick and Morty-verse. It’s a magical thing!</p>

<p><i>Goodnight even though it’s not night,
yall!</i></p>]]></content><author><name>Akshat Mundra</name></author><summary type="html"><![CDATA[just talking about machine learning]]></summary></entry><entry><title type="html">a post with giscus comments</title><link href="https://yoakshat.github.io/blog/2022/giscus-comments/" rel="alternate" type="text/html" title="a post with giscus comments" /><published>2022-12-10T15:59:00+00:00</published><updated>2022-12-10T15:59:00+00:00</updated><id>https://yoakshat.github.io/blog/2022/giscus-comments</id><content type="html" xml:base="https://yoakshat.github.io/blog/2022/giscus-comments/"><![CDATA[<p>This post shows how to add GISCUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[an example of a blog post with giscus comments]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://yoakshat.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog" /><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://yoakshat.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://yoakshat.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">a post with redirect</title><link href="https://yoakshat.github.io/blog/2022/redirect/" rel="alternate" type="text/html" title="a post with redirect" /><published>2022-02-01T17:39:00+00:00</published><updated>2022-02-01T17:39:00+00:00</updated><id>https://yoakshat.github.io/blog/2022/redirect</id><content type="html" xml:base="https://yoakshat.github.io/blog/2022/redirect/"><![CDATA[<p>Redirecting to another page.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[you can also redirect to assets like pdf]]></summary></entry><entry><title type="html">a post with diagrams</title><link href="https://yoakshat.github.io/blog/2021/diagrams/" rel="alternate" type="text/html" title="a post with diagrams" /><published>2021-07-04T17:39:00+00:00</published><updated>2021-07-04T17:39:00+00:00</updated><id>https://yoakshat.github.io/blog/2021/diagrams</id><content type="html" xml:base="https://yoakshat.github.io/blog/2021/diagrams/"><![CDATA[<p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin.
Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p>

<p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine.
Also, be mindful of that because of diagram generation the fist time you build your Jekyll website after adding new diagrams will be SLOW.
For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p>

<h2 id="mermaid">Mermaid</h2>

<p>Install mermaid using <code class="language-plaintext highlighter-rouge">node.js</code> package manager <code class="language-plaintext highlighter-rouge">npm</code> by running the following command:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> mermaid.cli
</code></pre></div></div>

<p>The diagram below was generated by the following code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div>

<div class="jekyll-diagrams diagrams mermaid">
  <svg id="mermaid-1681790438800" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1681790438800 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1681790438800 .node circle,#mermaid-1681790438800 .node ellipse,#mermaid-1681790438800 .node polygon,#mermaid-1681790438800 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1681790438800 .node.clickable{cursor:pointer}#mermaid-1681790438800 .arrowheadPath{fill:#333}#mermaid-1681790438800 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1681790438800 .edgeLabel{background-color:#e8e8e8}#mermaid-1681790438800 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1681790438800 .cluster text{fill:#333}#mermaid-1681790438800 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1681790438800 .actor{stroke:#ccf;fill:#ececff}#mermaid-1681790438800 text.actor{fill:#000;stroke:none}#mermaid-1681790438800 .actor-line{stroke:grey}#mermaid-1681790438800 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1681790438800 .messageLine0,#mermaid-1681790438800 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1681790438800 #arrowhead{fill:#333}#mermaid-1681790438800 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1681790438800 .messageText{fill:#333;stroke:none}#mermaid-1681790438800 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1681790438800 .labelText,#mermaid-1681790438800 .loopText{fill:#000;stroke:none}#mermaid-1681790438800 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1681790438800 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1681790438800 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1681790438800 .section{stroke:none;opacity:.2}#mermaid-1681790438800 .section0{fill:rgba(102,102,255,.49)}#mermaid-1681790438800 .section2{fill:#fff400}#mermaid-1681790438800 .section1,#mermaid-1681790438800 .section3{fill:#fff;opacity:.2}#mermaid-1681790438800 .sectionTitle0,#mermaid-1681790438800 .sectionTitle1,#mermaid-1681790438800 .sectionTitle2,#mermaid-1681790438800 .sectionTitle3{fill:#333}#mermaid-1681790438800 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1681790438800 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1681790438800 .grid path{stroke-width:0}#mermaid-1681790438800 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1681790438800 .task{stroke-width:2}#mermaid-1681790438800 .taskText{text-anchor:middle;font-size:11px}#mermaid-1681790438800 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1681790438800 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1681790438800 .taskText0,#mermaid-1681790438800 .taskText1,#mermaid-1681790438800 .taskText2,#mermaid-1681790438800 .taskText3{fill:#fff}#mermaid-1681790438800 .task0,#mermaid-1681790438800 .task1,#mermaid-1681790438800 .task2,#mermaid-1681790438800 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1681790438800 .taskTextOutside0,#mermaid-1681790438800 .taskTextOutside1,#mermaid-1681790438800 .taskTextOutside2,#mermaid-1681790438800 .taskTextOutside3{fill:#000}#mermaid-1681790438800 .active0,#mermaid-1681790438800 .active1,#mermaid-1681790438800 .active2,#mermaid-1681790438800 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1681790438800 .activeText0,#mermaid-1681790438800 .activeText1,#mermaid-1681790438800 .activeText2,#mermaid-1681790438800 .activeText3{fill:#000!important}#mermaid-1681790438800 .done0,#mermaid-1681790438800 .done1,#mermaid-1681790438800 .done2,#mermaid-1681790438800 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1681790438800 .doneText0,#mermaid-1681790438800 .doneText1,#mermaid-1681790438800 .doneText2,#mermaid-1681790438800 .doneText3{fill:#000!important}#mermaid-1681790438800 .crit0,#mermaid-1681790438800 .crit1,#mermaid-1681790438800 .crit2,#mermaid-1681790438800 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1681790438800 .activeCrit0,#mermaid-1681790438800 .activeCrit1,#mermaid-1681790438800 .activeCrit2,#mermaid-1681790438800 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1681790438800 .doneCrit0,#mermaid-1681790438800 .doneCrit1,#mermaid-1681790438800 .doneCrit2,#mermaid-1681790438800 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1681790438800 .activeCritText0,#mermaid-1681790438800 .activeCritText1,#mermaid-1681790438800 .activeCritText2,#mermaid-1681790438800 .activeCritText3,#mermaid-1681790438800 .doneCritText0,#mermaid-1681790438800 .doneCritText1,#mermaid-1681790438800 .doneCritText2,#mermaid-1681790438800 .doneCritText3{fill:#000!important}#mermaid-1681790438800 .titleText{text-anchor:middle;font-size:18px;fill:#000}#mermaid-1681790438800 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1681790438800 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1681790438800 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1681790438800 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1681790438800 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1681790438800 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1681790438800 #compositionEnd,#mermaid-1681790438800 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1681790438800 #aggregationEnd,#mermaid-1681790438800 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1681790438800 #dependencyEnd,#mermaid-1681790438800 #dependencyStart,#mermaid-1681790438800 #extensionEnd,#mermaid-1681790438800 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1681790438800 .branch-label,#mermaid-1681790438800 .commit-id,#mermaid-1681790438800 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1681790438800 {
    color: rgb(0, 0, 0);
    font: normal normal 400 normal 16px / normal "Times New Roman";
  }</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[an example of a blog post with diagrams]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://yoakshat.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post" /><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://yoakshat.github.io/blog/2021/distill</id><content type="html" xml:base="https://yoakshat.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2>

<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine.
You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>.
If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p>

<p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph.
Here is an example:</p>

\[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\]

<p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>

<hr />

<h2 id="citations">Citations</h2>

<p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag.
The key attribute is a reference to the id provided in the bibliography.
The key attribute can take multiple ids, separated by commas.</p>

<p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover).
If you have an appendix, a bibliography is automatically created and populated in it.</p>

<p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover.
However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p>

<hr />

<h2 id="footnotes">Footnotes</h2>

<p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag.
The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p>

<hr />

<h2 id="code-blocks">Code Blocks</h2>

<p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags.
An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>.
For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p>

<d-code block="" language="javascript">
  var x = 25;
  function(x) {
    return x * x;
  }
</d-code>

<p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode.
You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<hr />

<h2 id="interactive-plots">Interactive Plots</h2>

<p>You can add interative plots using plotly + iframes :framed_picture:</p>

<div class="l-page">
  <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe>
</div>

<p>The plot must be generated separately and saved into an HTML file.
To generate the plot that you see above, you can use the following code snippet:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
  <span class="s">'https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
  <span class="n">df</span><span class="p">,</span>
  <span class="n">lat</span><span class="o">=</span><span class="s">'Latitude'</span><span class="p">,</span>
  <span class="n">lon</span><span class="o">=</span><span class="s">'Longitude'</span><span class="p">,</span>
  <span class="n">z</span><span class="o">=</span><span class="s">'Magnitude'</span><span class="p">,</span>
  <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
  <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
  <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
  <span class="n">mapbox_style</span><span class="o">=</span><span class="s">"stamen-terrain"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="s">'assets/plotly/demo.html'</span><span class="p">)</span></code></pre></figure>

<hr />

<h2 id="details-boxes">Details boxes</h2>

<p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p>

<details><summary>Click here to know more</summary>
<p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p>
</details>

<hr />

<h2 id="layouts">Layouts</h2>

<p>The main text column is referred to as the body.
It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p>

<div class="fake-img l-body">
  <p>.l-body</p>
</div>

<p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p>

<div class="fake-img l-page">
  <p>.l-page</p>
</div>

<p>All of these have an outset variant if you want to poke out from the body text a little bit.
For instance:</p>

<div class="fake-img l-body-outset">
  <p>.l-body-outset</p>
</div>

<div class="fake-img l-page-outset">
  <p>.l-page-outset</p>
</div>

<p>Occasionally you’ll want to use the full browser width.
For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>.
You can also inset the element a little from the edge of the browser by using the inset variant.</p>

<div class="fake-img l-screen">
  <p>.l-screen</p>
</div>
<div class="fake-img l-screen-inset">
  <p>.l-screen-inset</p>
</div>

<p>The final layout is for marginalia, asides, and footnotes.
It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p>

<div class="fake-img l-gutter">
  <p>.l-gutter</p>
</div>

<hr />

<h2 id="other-typography">Other Typography?</h2>

<p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p>

<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>

<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>

<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>

<ol>
  <li>First ordered list item</li>
  <li>Another item
⋅⋅* Unordered sub-list.</li>
  <li>Actual numbers don’t matter, just that it’s a number
⋅⋅1. Ordered sub-list</li>
  <li>And another item.</li>
</ol>

<p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p>

<p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>

<ul>
  <li>Unordered list can use asterisks</li>
  <li>Or minuses</li>
  <li>Or pluses</li>
</ul>

<p><a href="https://www.google.com">I’m an inline-style link</a></p>

<p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p>

<p><a href="https://www.mozilla.org">I’m a reference-style link</a></p>

<p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p>

<p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p>

<p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p>

<p>URLs and URLs in angle brackets will automatically get turned into links.
http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes
example.com (but not on Github, for example).</p>

<p>Some text to show that the reference links can follow later.</p>

<p>Here’s our logo (hover to see the title text):</p>

<p>Inline-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1" /></p>

<p>Reference-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2" /></p>

<p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="s">"Python syntax highlighting"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div>

<p>Colons can be used to align columns.</p>

<table>
  <thead>
    <tr>
      <th>Tables</th>
      <th style="text-align: center">Are</th>
      <th style="text-align: right">Cool</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>col 3 is</td>
      <td style="text-align: center">right-aligned</td>
      <td style="text-align: right">$1600</td>
    </tr>
    <tr>
      <td>col 2 is</td>
      <td style="text-align: center">centered</td>
      <td style="text-align: right">$12</td>
    </tr>
    <tr>
      <td>zebra stripes</td>
      <td style="text-align: center">are neat</td>
      <td style="text-align: right">$1</td>
    </tr>
  </tbody>
</table>

<p>There must be at least 3 dashes separating each header cell.
The outer pipes (|) are optional, and you don’t need to make the
raw Markdown line up prettily. You can also use inline Markdown.</p>

<table>
  <thead>
    <tr>
      <th>Markdown</th>
      <th>Less</th>
      <th>Pretty</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>Still</em></td>
      <td><code class="language-plaintext highlighter-rouge">renders</code></td>
      <td><strong>nicely</strong></td>
    </tr>
    <tr>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.</p>
</blockquote>

<p>Quote break.</p>

<blockquote>
  <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>
</blockquote>

<p>Here’s a line for us to start with.</p>

<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>

<p>This line is also a separate paragraph, but…
This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry><entry><title type="html">a post with github metadata</title><link href="https://yoakshat.github.io/blog/2020/github-metadata/" rel="alternate" type="text/html" title="a post with github metadata" /><published>2020-09-28T21:01:00+00:00</published><updated>2020-09-28T21:01:00+00:00</updated><id>https://yoakshat.github.io/blog/2020/github-metadata</id><content type="html" xml:base="https://yoakshat.github.io/blog/2020/github-metadata/"><![CDATA[<p>A sample blog page that demonstrates the accessing of github meta data.</p>

<h2 id="what-does-github-metadata-do">What does Github-MetaData do?</h2>
<ul>
  <li>Propagates the site.github namespace with repository metadata</li>
  <li>Setting site variables :
    <ul>
      <li>site.title</li>
      <li>site.description</li>
      <li>site.url</li>
      <li>site.baseurl</li>
    </ul>
  </li>
  <li>Accessing the metadata - duh.</li>
  <li>Generating edittable links.</li>
</ul>

<h2 id="additional-reading">Additional Reading</h2>
<ul>
  <li>If you’re recieving incorrect/missing data, you may need to perform a Github API<a href="https://github.com/jekyll/github-metadata/blob/master/docs/authentication.md"> authentication</a>.</li>
  <li>Go through this <a href="https://jekyll.github.io/github-metadata/">README</a> for more details on the topic.</li>
  <li><a href="https://github.com/jekyll/github-metadata/blob/master/docs/site.github.md">This page</a> highlights all the feilds you can access with github-metadata.
<br /></li>
</ul>

<h2 id="example-metadata">Example MetaData</h2>
<ul>
  <li>Host Name :</li>
  <li>URL :</li>
  <li>BaseURL :</li>
  <li>Archived :</li>
  <li>Contributors :</li>
</ul>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[a quick run down on accessing github metadata.]]></summary></entry><entry><title type="html">a post with twitter</title><link href="https://yoakshat.github.io/blog/2020/twitter/" rel="alternate" type="text/html" title="a post with twitter" /><published>2020-09-28T15:12:00+00:00</published><updated>2020-09-28T15:12:00+00:00</updated><id>https://yoakshat.github.io/blog/2020/twitter</id><content type="html" xml:base="https://yoakshat.github.io/blog/2020/twitter/"><![CDATA[<p>A sample blog page that demonstrates the inclusion of Tweets/Timelines/etc.</p>

<h1 id="tweet">Tweet</h1>
<p>An example of displaying a tweet:</p>
<div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<h1 id="timeline">Timeline</h1>
<p>An example of pulling from a timeline:</p>
<div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<h1 id="additional-details">Additional Details</h1>
<p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><category term="formatting" /><summary type="html"><![CDATA[an example of a blog post with twitter]]></summary></entry><entry><title type="html">a post with disqus comments</title><link href="https://yoakshat.github.io/blog/2015/disqus-comments/" rel="alternate" type="text/html" title="a post with disqus comments" /><published>2015-10-20T15:59:00+00:00</published><updated>2015-10-20T15:59:00+00:00</updated><id>https://yoakshat.github.io/blog/2015/disqus-comments</id><content type="html" xml:base="https://yoakshat.github.io/blog/2015/disqus-comments/"><![CDATA[<p>This post shows how to add DISQUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[an example of a blog post with disqus comments]]></summary></entry></feed>